{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dmack\\\\OneDrive\\\\Documents\\\\React\\\\react-forms\\\\src\\\\components\\\\SimpleInput.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleInput = props => {\n  _s();\n  const [enteredName, setenteredName] = useState('');\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const nameInputChangeHandler = event => {\n    setenteredName(event.target.value);\n    if (event.target.value.trim() !== '') {\n      setEnteredNameIsValid(true);\n    }\n  };\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false);\n    }\n  };\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false);\n      return; //returns from the function so the rest of the function wont be executed\n    }\n\n    setEnteredNameIsValid(true);\n    console.log(enteredName);\n\n    //nameInputRef.current.value = \"\" -> not ideal because we are directly manipulating the dom\n    //setenteredName(\"\") -> this way is OK but not very clean\n  };\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: nameInputRef,\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleInput, \"xLbe/q8sV8IFWnhFgQiWuJFr2ZY=\");\n_c = SimpleInput;\nexport default SimpleInput;\nvar _c;\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","SimpleInput","props","_s","enteredName","setenteredName","enteredNameIsValid","setEnteredNameIsValid","enteredNameTouched","setEnteredNameTouched","nameInputChangeHandler","event","target","value","trim","nameInputBlurHandler","formSubmissionHandler","preventDefault","console","log","nameInputIsInvalid","nameInputClasses","onSubmit","children","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","ref","nameInputRef","type","id","onChange","onBlur","_c","$RefreshReg$"],"sources":["C:/Users/dmack/OneDrive/Documents/React/react-forms/src/components/SimpleInput.js"],"sourcesContent":["import { useState } from \"react\"\n\nconst SimpleInput = (props) => {\n\n  const [enteredName, setenteredName] = useState('')\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false)\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false)\n\n  const nameInputChangeHandler = event => {\n    setenteredName(event.target.value)\n\n    if (event.target.value.trim() !== '') {\n      setEnteredNameIsValid(true)\n    }\n\n  }\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false)\n    }\n\n  }\n\n  const formSubmissionHandler = event => {\n    event.preventDefault()\n\n    setEnteredNameTouched(true)\n\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false)\n      return; //returns from the function so the rest of the function wont be executed\n    }\n\n    setEnteredNameIsValid(true)\n    console.log(enteredName);\n\n    //nameInputRef.current.value = \"\" -> not ideal because we are directly manipulating the dom\n    //setenteredName(\"\") -> this way is OK but not very clean\n  }\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  const nameInputClasses = nameInputIsInvalid \n    ? 'form-control invalid' \n    : 'form-control'\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input \n        ref={nameInputRef} \n        type='text' id='name' \n        onChange={nameInputChangeHandler} \n        onBlur={nameInputBlurHandler}\n        value={enteredName}/>\n        {nameInputIsInvalid && <p className=\"error-text\">Name must not be empty.</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAE7B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACQ,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAM,CAACU,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAEnE,MAAMY,sBAAsB,GAAGC,KAAK,IAAI;IACtCN,cAAc,CAACM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IAElC,IAAIF,KAAK,CAACC,MAAM,CAACC,KAAK,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MACpCP,qBAAqB,CAAC,IAAI,CAAC;IAC7B;EAEF,CAAC;EAED,MAAMQ,oBAAoB,GAAGJ,KAAK,IAAI;IACpCF,qBAAqB,CAAC,IAAI,CAAC;IAE3B,IAAIL,WAAW,CAACU,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC7BP,qBAAqB,CAAC,KAAK,CAAC;IAC9B;EAEF,CAAC;EAED,MAAMS,qBAAqB,GAAGL,KAAK,IAAI;IACrCA,KAAK,CAACM,cAAc,CAAC,CAAC;IAEtBR,qBAAqB,CAAC,IAAI,CAAC;IAE3B,IAAIL,WAAW,CAACU,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC7BP,qBAAqB,CAAC,KAAK,CAAC;MAC5B,OAAO,CAAC;IACV;;IAEAA,qBAAqB,CAAC,IAAI,CAAC;IAC3BW,OAAO,CAACC,GAAG,CAACf,WAAW,CAAC;;IAExB;IACA;EACF,CAAC;;EAED,MAAMgB,kBAAkB,GAAG,CAACd,kBAAkB,IAAIE,kBAAkB;EAEpE,MAAMa,gBAAgB,GAAGD,kBAAkB,GACvC,sBAAsB,GACtB,cAAc;EAElB,oBACEpB,OAAA;IAAMsB,QAAQ,EAAEN,qBAAsB;IAAAO,QAAA,gBACpCvB,OAAA;MAAKwB,SAAS,EAAEH,gBAAiB;MAAAE,QAAA,gBAC/BvB,OAAA;QAAOyB,OAAO,EAAC,MAAM;QAAAF,QAAA,EAAC;MAAS;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACvC7B,OAAA;QACA8B,GAAG,EAAEC,YAAa;QAClBC,IAAI,EAAC,MAAM;QAACC,EAAE,EAAC,MAAM;QACrBC,QAAQ,EAAExB,sBAAuB;QACjCyB,MAAM,EAAEpB,oBAAqB;QAC7BF,KAAK,EAAET;MAAY;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,EACpBT,kBAAkB,iBAAIpB,OAAA;QAAGwB,SAAS,EAAC,YAAY;QAAAD,QAAA,EAAC;MAAuB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzE,CAAC,eACN7B,OAAA;MAAKwB,SAAS,EAAC,cAAc;MAAAD,QAAA,eAC3BvB,OAAA;QAAAuB,QAAA,EAAQ;MAAM;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEX,CAAC;AAAC1B,EAAA,CAhEIF,WAAW;AAAAmC,EAAA,GAAXnC,WAAW;AAkEjB,eAAeA,WAAW;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}